problem statement:-
In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.

For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.
The twin sum is defined as the sum of a node and its twin.

Given the head of a linked list with even length, return the maximum twin sum of the linked list.


solution:-

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int pairSum(ListNode* head) {
        ListNode *temp = head;
        vector<int> ans;
        while(temp)
        {
            ans.push_back(temp->val);
            temp = temp->next;
        }
        
        int si = 0;
        int ei = ans.size() - 1;
        int sum = 0;
        int max_sum = INT_MIN;
        while(si<=ei)
        {
            
            sum = ans[si] + ans[ei];
            max_sum = max(sum,max_sum);
            si++;
            ei--;
            
        }
        return max_sum;
      
    }
};

problem link:- https://leetcode.com/problems/maximum-twin-sum-of-a-linked-list/
