problem-
You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

 solution-
 int jump(vector<int>& nums) {
        int n=nums.size();
        if(n<2) return 0;
        int jump=1, maxi=nums[0], curr=nums[0];
        for(int i=0;i<n-1;i++)
        {
            maxi=max(maxi, nums[i]+i);
            if(curr==i)
            {
                jump++;
                curr=maxi;
            }
        }
        return jump;
    }
    
    problem link-
    https://leetcode.com/problems/jump-game-ii/
